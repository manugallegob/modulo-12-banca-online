(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = global || self, factory(global['@lemoncode/fonk-is-number-validator'] = {}));
}(this, function (exports) { 'use strict';

  var VALIDATOR_TYPE = 'IS_NUMBER';
  var defaultCustomArgs = {
    strictTypes: false
  };
  var setCustomArgs = function setCustomArgs(customArgs) {
    return defaultCustomArgs = customArgs;
  };
  var defaultMessage = 'Must be a number';
  var setErrorMessage = function setErrorMessage(message) {
    return defaultMessage = message;
  };

  var isDefined = function isDefined(value) {
    return value !== void 0 && value !== null && value !== '';
  };

  var validateType = function validateType(value, args) {
    return !args.strictTypes || typeof value === 'number';
  };

  var validate = function validate(value) {
    return !isNaN(Number(value));
  };

  var validator = function validator(fieldValidatorArgs) {
    var value = fieldValidatorArgs.value,
        _fieldValidatorArgs$m = fieldValidatorArgs.message,
        message = _fieldValidatorArgs$m === void 0 ? defaultMessage : _fieldValidatorArgs$m,
        _fieldValidatorArgs$c = fieldValidatorArgs.customArgs,
        customArgs = _fieldValidatorArgs$c === void 0 ? defaultCustomArgs : _fieldValidatorArgs$c;
    var succeeded = !isDefined(value) || validateType(value, customArgs) && validate(value);
    return {
      succeeded: succeeded,
      message: succeeded ? '' : message,
      type: VALIDATOR_TYPE
    };
  };

  var validator$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    setCustomArgs: setCustomArgs,
    setErrorMessage: setErrorMessage,
    validator: validator
  });

  exports.isNumber = validator$1;

  Object.defineProperty(exports, '__esModule', { value: true });

}));
